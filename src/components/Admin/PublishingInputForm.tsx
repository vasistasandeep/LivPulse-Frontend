import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
  Divider,
  Chip,
  IconButton,
  Tooltip,
  Paper,
  Switch,
  FormControlLabel,
} from '@mui/material';
import {
  Add,
  Save,
  Refresh,
  Movie,
  LiveTv,
  VideoLibrary,
  InfoOutlined,
  CloudUpload,
  Security,
  Subtitles,
  Settings as SettingsIcon,
} from '@mui/icons-material';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { dashboardAPI } from '../../api/dashboardAPI';

interface PublishingData {
  vod: {
    totalContent: number;
    publishedToday: number;
    pendingApproval: number;
    scheduledReleases: number;
  };
  live: {
    activeStreams: number;
    scheduledStreams: number;
    totalViewers: number;
    peakConcurrency: number;
  };
  shorts: {
    totalShorts: number;
    publishedToday: number;
    trendinShorts: number;
    avgViewDuration: number;
  };
  delivery: {
    successfulDeliveries: number;
    failedDeliveries: number;
    avgDeliveryTime: number;
    deliveryPartners: number;
  };
  drm: {
    protectedContent: number;
    drmViolations: number;
    securityScore: number;
  };
  subtitles: {
    contentWithSubtitles: number;
    languages: number;
    autoGeneratedSubs: number;
  };
  encoding: {
    totalProfiles: number;
    activeEncodings: number;
    completedToday: number;
    failedEncodings: number;
  };
}

const PublishingInputForm: React.FC = () => {
  const [formData, setFormData] = useState<PublishingData>({
    vod: {
      totalContent: 0,
      publishedToday: 0,
      pendingApproval: 0,
      scheduledReleases: 0,
    },
    live: {
      activeStreams: 0,
      scheduledStreams: 0,
      totalViewers: 0,
      peakConcurrency: 0,
    },
    shorts: {
      totalShorts: 0,
      publishedToday: 0,
      trendinShorts: 0,
      avgViewDuration: 0,
    },
    delivery: {
      successfulDeliveries: 0,
      failedDeliveries: 0,
      avgDeliveryTime: 0,
      deliveryPartners: 0,
    },
    drm: {
      protectedContent: 0,
      drmViolations: 0,
      securityScore: 0,
    },
    subtitles: {
      contentWithSubtitles: 0,
      languages: 0,
      autoGeneratedSubs: 0,
    },
    encoding: {
      totalProfiles: 0,
      activeEncodings: 0,
      completedToday: 0,
      failedEncodings: 0,
    },
  });

  const [showHelp, setShowHelp] = useState(false);
  const queryClient = useQueryClient();

  // Fetch current publishing data
  const { data: currentData, isLoading, error } = useQuery({
    queryKey: ['admin-publishing-data'],
    queryFn: () => dashboardAPI.getPublishingMetrics(),
  });

  // Save publishing data
  const saveDataMutation = useMutation({
    mutationFn: (data: PublishingData) => dashboardAPI.updatePublishingData(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin-publishing-data'] });
      queryClient.invalidateQueries({ queryKey: ['publishing-metrics'] });
    },
  });

  const handleInputChange = (section: keyof PublishingData, field: string, value: number) => {
    setFormData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const handleSave = () => {
    saveDataMutation.mutate(formData);
  };

  const handleRefresh = () => {
    if (currentData?.data?.data) {
      setFormData(currentData.data.data);
    }
  };

  React.useEffect(() => {
    if (currentData?.data?.data) {
      setFormData(currentData.data.data);
    }
  }, [currentData]);

  const sections = [
    {
      key: 'vod' as keyof PublishingData,
      title: 'VOD Content',
      icon: <Movie />,
      color: 'primary.main',
      fields: [
        { key: 'totalContent', label: 'Total Content Library', helper: 'Total number of VOD items in library' },
        { key: 'publishedToday', label: 'Published Today', helper: 'New content published today' },
        { key: 'pendingApproval', label: 'Pending Approval', helper: 'Content awaiting approval' },
        { key: 'scheduledReleases', label: 'Scheduled Releases', helper: 'Content scheduled for future release' },
      ]
    },
    {
      key: 'live' as keyof PublishingData,
      title: 'Live Streaming',
      icon: <LiveTv />,
      color: 'error.main',
      fields: [
        { key: 'activeStreams', label: 'Active Streams', helper: 'Currently live streams' },
        { key: 'scheduledStreams', label: 'Scheduled Streams', helper: 'Upcoming scheduled streams' },
        { key: 'totalViewers', label: 'Total Viewers', helper: 'Current total viewer count' },
        { key: 'peakConcurrency', label: 'Peak Concurrency', helper: 'Peak concurrent viewers today' },
      ]
    },
    {
      key: 'shorts' as keyof PublishingData,
      title: 'Shorts',
      icon: <VideoLibrary />,
      color: 'success.main',
      fields: [
        { key: 'totalShorts', label: 'Total Shorts', helper: 'Total short-form content' },
        { key: 'publishedToday', label: 'Published Today', helper: 'Shorts published today' },
        { key: 'trendinShorts', label: 'Trending Shorts', helper: 'Currently trending shorts' },
        { key: 'avgViewDuration', label: 'Avg View Duration (sec)', helper: 'Average viewing duration in seconds' },
      ]
    },
    {
      key: 'delivery' as keyof PublishingData,
      title: 'Content Delivery',
      icon: <CloudUpload />,
      color: 'info.main',
      fields: [
        { key: 'successfulDeliveries', label: 'Successful Deliveries', helper: 'Content deliveries completed successfully' },
        { key: 'failedDeliveries', label: 'Failed Deliveries', helper: 'Content delivery failures' },
        { key: 'avgDeliveryTime', label: 'Avg Delivery Time (min)', helper: 'Average delivery time in minutes' },
        { key: 'deliveryPartners', label: 'Delivery Partners', helper: 'Number of active delivery partners' },
      ]
    },
    {
      key: 'drm' as keyof PublishingData,
      title: 'DRM & Security',
      icon: <Security />,
      color: 'warning.main',
      fields: [
        { key: 'protectedContent', label: 'Protected Content', helper: 'Content with DRM protection' },
        { key: 'drmViolations', label: 'DRM Violations', helper: 'DRM violation attempts detected' },
        { key: 'securityScore', label: 'Security Score (%)', helper: 'Overall security score percentage' },
      ]
    },
    {
      key: 'subtitles' as keyof PublishingData,
      title: 'Subtitles & Accessibility',
      icon: <Subtitles />,
      color: 'secondary.main',
      fields: [
        { key: 'contentWithSubtitles', label: 'Content With Subtitles', helper: 'Content that has subtitle tracks' },
        { key: 'languages', label: 'Supported Languages', helper: 'Number of subtitle languages supported' },
        { key: 'autoGeneratedSubs', label: 'Auto-Generated Subs', helper: 'Automatically generated subtitle tracks' },
      ]
    },
    {
      key: 'encoding' as keyof PublishingData,
      title: 'Encoding Profiles',
      icon: <SettingsIcon />,
      color: 'text.secondary',
      fields: [
        { key: 'totalProfiles', label: 'Total Profiles', helper: 'Total encoding profiles configured' },
        { key: 'activeEncodings', label: 'Active Encodings', helper: 'Currently running encoding jobs' },
        { key: 'completedToday', label: 'Completed Today', helper: 'Encoding jobs completed today' },
        { key: 'failedEncodings', label: 'Failed Encodings', helper: 'Failed encoding jobs' },
      ]
    },
  ];

  return (
    <Box>
      {/* Header */}
      <Box mb={3} display="flex" justifyContent="space-between" alignItems="center">
        <Box>
          <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold' }}>
            Publishing Data Management
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Input and manage all publishing-related metrics for VOD, Live, and Shorts content
          </Typography>
        </Box>
        <Box display="flex" gap={1}>
          <FormControlLabel
            control={
              <Switch
                checked={showHelp}
                onChange={(e) => setShowHelp(e.target.checked)}
                size="small"
              />
            }
            label="Show Help"
          />
          <Button
            variant="outlined"
            startIcon={<Refresh />}
            onClick={handleRefresh}
            disabled={isLoading}
          >
            Refresh
          </Button>
          <Button
            variant="contained"
            startIcon={<Save />}
            onClick={handleSave}
            disabled={saveDataMutation.isPending}
          >
            Save Changes
          </Button>
        </Box>
      </Box>

      {/* Status Messages */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          Failed to load current data: {error.message}
        </Alert>
      )}

      {saveDataMutation.isError && (
        <Alert severity="error" sx={{ mb: 2 }}>
          Failed to save changes: {saveDataMutation.error.message}
        </Alert>
      )}

      {saveDataMutation.isSuccess && (
        <Alert severity="success" sx={{ mb: 2 }}>
          Publishing data saved successfully!
        </Alert>
      )}

      {/* Form Sections */}
      <Grid container spacing={3}>
        {sections.map((section) => (
          <Grid item xs={12} md={6} key={section.key}>
            <Card sx={{ height: '100%' }}>
              <CardContent>
                <Box display="flex" alignItems="center" mb={2}>
                  <Box sx={{ color: section.color, mr: 1 }}>
                    {section.icon}
                  </Box>
                  <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                    {section.title}
                  </Typography>
                  {showHelp && (
                    <Tooltip title={`Manage ${section.title.toLowerCase()} related metrics`}>
                      <IconButton size="small" sx={{ ml: 1 }}>
                        <InfoOutlined fontSize="small" />
                      </IconButton>
                    </Tooltip>
                  )}
                </Box>
                
                <Grid container spacing={2}>
                  {section.fields.map((field) => (
                    <Grid item xs={12} sm={6} key={field.key}>
                      <TextField
                        fullWidth
                        size="small"
                        type="number"
                        label={field.label}
                        value={(formData[section.key] as any)[field.key] || 0}
                        onChange={(e) => handleInputChange(section.key, field.key, parseInt(e.target.value) || 0)}
                        helperText={showHelp ? field.helper : undefined}
                        InputProps={{
                          inputProps: { min: 0 }
                        }}
                      />
                    </Grid>
                  ))}
                </Grid>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  );
};

export default PublishingInputForm;